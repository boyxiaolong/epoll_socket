// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: heart_beat.proto

#include "heart_beat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace game {
class ReqHeartDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqHeart>
      _instance;
} _ReqHeart_default_instance_;
class ResHeartDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResHeart>
      _instance;
} _ResHeart_default_instance_;
}  // namespace game
namespace protobuf_heart_5fbeat_2eproto {
static void InitDefaultsReqHeart() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_ReqHeart_default_instance_;
    new (ptr) ::game::ReqHeart();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::ReqHeart::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqHeart =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqHeart}, {}};

static void InitDefaultsResHeart() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_ResHeart_default_instance_;
    new (ptr) ::game::ResHeart();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::ResHeart::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResHeart =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResHeart}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ReqHeart.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResHeart.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::ReqHeart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::ReqHeart, msg_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::ResHeart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::ResHeart, msg_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::game::ReqHeart)},
  { 6, -1, sizeof(::game::ResHeart)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::game::_ReqHeart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::game::_ResHeart_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "heart_beat.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020heart_beat.proto\022\004game\"\032\n\010ReqHeart\022\016\n\006"
      "msg_id\030\001 \001(\005\"\032\n\010ResHeart\022\016\n\006msg_id\030\001 \001(\005"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 88);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "heart_beat.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_heart_5fbeat_2eproto
namespace game {

// ===================================================================

void ReqHeart::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqHeart::kMsgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqHeart::ReqHeart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_heart_5fbeat_2eproto::scc_info_ReqHeart.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.ReqHeart)
}
ReqHeart::ReqHeart(const ReqHeart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_id_ = from.msg_id_;
  // @@protoc_insertion_point(copy_constructor:game.ReqHeart)
}

void ReqHeart::SharedCtor() {
  msg_id_ = 0;
}

ReqHeart::~ReqHeart() {
  // @@protoc_insertion_point(destructor:game.ReqHeart)
  SharedDtor();
}

void ReqHeart::SharedDtor() {
}

void ReqHeart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqHeart::descriptor() {
  ::protobuf_heart_5fbeat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_heart_5fbeat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqHeart& ReqHeart::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_heart_5fbeat_2eproto::scc_info_ReqHeart.base);
  return *internal_default_instance();
}


void ReqHeart::Clear() {
// @@protoc_insertion_point(message_clear_start:game.ReqHeart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_id_ = 0;
  _internal_metadata_.Clear();
}

bool ReqHeart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.ReqHeart)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 msg_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.ReqHeart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.ReqHeart)
  return false;
#undef DO_
}

void ReqHeart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.ReqHeart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msg_id = 1;
  if (this->msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msg_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:game.ReqHeart)
}

::google::protobuf::uint8* ReqHeart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:game.ReqHeart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msg_id = 1;
  if (this->msg_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msg_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.ReqHeart)
  return target;
}

size_t ReqHeart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.ReqHeart)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 msg_id = 1;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msg_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqHeart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.ReqHeart)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqHeart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqHeart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.ReqHeart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.ReqHeart)
    MergeFrom(*source);
  }
}

void ReqHeart::MergeFrom(const ReqHeart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.ReqHeart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
}

void ReqHeart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.ReqHeart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHeart::CopyFrom(const ReqHeart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.ReqHeart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHeart::IsInitialized() const {
  return true;
}

void ReqHeart::Swap(ReqHeart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqHeart::InternalSwap(ReqHeart* other) {
  using std::swap;
  swap(msg_id_, other->msg_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqHeart::GetMetadata() const {
  protobuf_heart_5fbeat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_heart_5fbeat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResHeart::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResHeart::kMsgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResHeart::ResHeart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_heart_5fbeat_2eproto::scc_info_ResHeart.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.ResHeart)
}
ResHeart::ResHeart(const ResHeart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_id_ = from.msg_id_;
  // @@protoc_insertion_point(copy_constructor:game.ResHeart)
}

void ResHeart::SharedCtor() {
  msg_id_ = 0;
}

ResHeart::~ResHeart() {
  // @@protoc_insertion_point(destructor:game.ResHeart)
  SharedDtor();
}

void ResHeart::SharedDtor() {
}

void ResHeart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResHeart::descriptor() {
  ::protobuf_heart_5fbeat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_heart_5fbeat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResHeart& ResHeart::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_heart_5fbeat_2eproto::scc_info_ResHeart.base);
  return *internal_default_instance();
}


void ResHeart::Clear() {
// @@protoc_insertion_point(message_clear_start:game.ResHeart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_id_ = 0;
  _internal_metadata_.Clear();
}

bool ResHeart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.ResHeart)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 msg_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.ResHeart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.ResHeart)
  return false;
#undef DO_
}

void ResHeart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.ResHeart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msg_id = 1;
  if (this->msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msg_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:game.ResHeart)
}

::google::protobuf::uint8* ResHeart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:game.ResHeart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msg_id = 1;
  if (this->msg_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msg_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.ResHeart)
  return target;
}

size_t ResHeart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.ResHeart)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 msg_id = 1;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msg_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResHeart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.ResHeart)
  GOOGLE_DCHECK_NE(&from, this);
  const ResHeart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResHeart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.ResHeart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.ResHeart)
    MergeFrom(*source);
  }
}

void ResHeart::MergeFrom(const ResHeart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.ResHeart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
}

void ResHeart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.ResHeart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResHeart::CopyFrom(const ResHeart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.ResHeart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResHeart::IsInitialized() const {
  return true;
}

void ResHeart::Swap(ResHeart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResHeart::InternalSwap(ResHeart* other) {
  using std::swap;
  swap(msg_id_, other->msg_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResHeart::GetMetadata() const {
  protobuf_heart_5fbeat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_heart_5fbeat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace game
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::game::ReqHeart* Arena::CreateMaybeMessage< ::game::ReqHeart >(Arena* arena) {
  return Arena::CreateInternal< ::game::ReqHeart >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::game::ResHeart* Arena::CreateMaybeMessage< ::game::ResHeart >(Arena* arena) {
  return Arena::CreateInternal< ::game::ResHeart >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
